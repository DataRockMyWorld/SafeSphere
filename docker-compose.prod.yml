version: '3.8'

services:
  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - safesphere_network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    volumes:
      - frontend_static:/usr/share/nginx/html
    restart: unless-stopped
    networks:
      - safesphere_network

  # Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    volumes:
      - backend_static:/app/staticfiles
      - backend_media:/app/media
      - backend_logs:/app/logs
    env_file:
      - .env.prod
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - safesphere_network

  # Celery worker
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    command: celery -A core worker --loglevel=info
    volumes:
      - backend_media:/app/media
      - backend_logs:/app/logs
    env_file:
      - .env.prod
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - safesphere_network

  # Celery beat (scheduler)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    command: celery -A core beat --loglevel=info
    volumes:
      - backend_logs:/app/logs
    env_file:
      - .env.prod
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - safesphere_network

  # Database
  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    env_file:
      - .env.prod
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    restart: unless-stopped
    networks:
      - safesphere_network

  # Redis
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - safesphere_network

  # Backup service
  backup:
    image: postgres:15-alpine
    volumes:
      - ./backups:/backups
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env.prod
    command: |
      sh -c '
        while true; do
          pg_dump -h db -U $${DB_USER} -d $${DB_NAME} > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
          find /backups -name "backup_*.sql" -mtime +7 -delete
          sleep 86400
        done
      '
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - safesphere_network

volumes:
  postgres_data:
  redis_data:
  backend_static:
  backend_media:
  backend_logs:
  frontend_static:
  nginx_logs:

networks:
  safesphere_network:
    driver: bridge 